- name: Create necessary directory for Quay local storage
  ansible.builtin.file:
    mode: 0775
    path: "{{ quay_storage }}"
    state: directory
    recurse: yes
  when: "quay_storage.startswith('/')"

- name: Set permissions on local storage directory
  ansible.posix.acl:
    path: "{{ quay_storage }}"
    entity: 1001
    etype: user
    permissions: wx
    state: present
  when: "quay_storage.startswith('/')"

- name: Create necessary directory for sqlite storage
  ansible.builtin.file:
    mode: 0775
    path: "{{ sqlite_storage }}"
    state: directory
    recurse: yes
  when: "sqlite_storage.startswith('/')"

- name: Set permissions on sqlite storage directory
  ansible.posix.acl:
    path: "{{ sqlite_storage }}"
    entity: 1001
    etype: user
    permissions: wx
    state: present
  when: "sqlite_storage.startswith('/')"

- name: Create necessary directory for Quay config bundle
  ansible.builtin.file:
    path: "{{ quay_root }}/quay-config"
    mode: 0750
    state: directory
    recurse: yes

- name: Copy Quay config.yaml file
  template:
    src: ../templates/config.yaml.j2
    dest: "{{ quay_root }}/quay-config/config.yaml"
    mode: 0750

- name: Check if SSL Cert exists
  stat:
    path: /runner/certs/quay.cert
  delegate_to: localhost
  register: ssl_cert

- name: Check if SSL Key exists
  stat:
    path: /runner/certs/quay.key
  delegate_to: localhost
  register: ssl_key

- name: Create SSL Certs
  block:
    - name: Create necessary directory for Quay rootCA files
      ansible.builtin.file:
        path: "{{ quay_root }}/quay-rootCA"
        mode: 0750
        state: directory
        recurse: yes
        
    - name: Create OpenSSL Config
      template:
        src: ../templates/req.j2
        dest: "{{ quay_root }}/quay-config/openssl.cnf"

    - name: Create root CA key
      command: "openssl genrsa -out {{ quay_root }}/quay-rootCA/rootCA.key 2048"

    - name: Create root CA pem
      command: "openssl req -x509 -new -config {{ quay_root }}/quay-config/openssl.cnf -nodes -key {{ quay_root }}/quay-rootCA/rootCA.key -sha256 -days 1024 -out {{ quay_root }}/quay-rootCA/rootCA.pem -addext basicConstraints=critical,CA:TRUE,pathlen:1"

    - name: Create ssl key
      command: "openssl genrsa -out {{ quay_root }}/quay-config/ssl.key 2048"

    - name: Create CSR
      command: "openssl req -new -key {{ quay_root }}/quay-config/ssl.key -out {{ quay_root }}/quay-config/ssl.csr -subj \"/CN=quay-enterprise\" -config {{ quay_root }}/quay-config/openssl.cnf"

    - name: Create self-signed cert
      command: "openssl x509 -req -in {{ quay_root }}/quay-config/ssl.csr -CA {{ quay_root }}/quay-rootCA/rootCA.pem -CAkey {{ quay_root }}/quay-rootCA/rootCA.key -CAcreateserial -out {{ quay_root }}/quay-config/ssl.cert -days 356 -extensions v3_req -extfile {{ quay_root }}/quay-config/openssl.cnf"

    - name: Create chain cert
      ansible.builtin.shell: cat {{ quay_root }}/quay-config/ssl.cert {{ quay_root }}/quay-rootCA/rootCA.pem > {{ quay_root }}/quay-config/chain.cert

    - name: Replace ssl cert with chain cert
      command: mv --force {{ quay_root }}/quay-config/chain.cert {{ quay_root }}/quay-config/ssl.cert
  when: (ssl_cert.stat.exists == False) and (ssl_key.stat.exists == False)

- name: Copy SSL Certs
  block:
    - name: Copy SSL certificate
      copy:
        src: /runner/certs/quay.cert
        dest: "{{ quay_root }}/quay-config/ssl.cert"

    - name: Copy SSL key
      copy:
        src: /runner/certs/quay.key
        dest: "{{ quay_root }}/quay-config/ssl.key"
  when: (ssl_cert.stat.exists == True) and (ssl_key.stat.exists == True)

- name: Set certificate permissions
  block:
    - name: Set permissions for key
      ansible.builtin.file:
        path: "{{ quay_root }}/quay-config/ssl.key"
        mode: u=rw,g=r,o=r

    - name: Set permissions for cert
      ansible.builtin.file:
        path: "{{ quay_root }}/quay-config/ssl.cert"
        mode: u=rw,g=r,o=r

- name: Copy Quay systemd service file
  template:
    src: ../templates/quay.service.j2
    dest: "{{ systemd_unit_dir }}/quay-app.service"

- name: Check if Quay image is loaded
  command: podman inspect --type=image {{ quay_image }}
  register: q
  ignore_errors: yes

- name: Pull Quay image
  containers.podman.podman_image:
    name: "{{ quay_image }}"
  when: q.rc != 0
  retries: 5
  delay: 5

- name: Create Quay Storage named volume
  containers.podman.podman_volume:
    state: present
    name: "{{ quay_storage }}"
  when: "not quay_storage.startswith('/')"

- name: Create Sqlite Storage named volume
  containers.podman.podman_volume:
    state: present
    name: "{{ sqlite_storage }}"
  when: "not sqlite_storage.startswith('/')"

- name: Check if sqlite cli image is loaded
  command: podman inspect --type=image {{ sqlite_image }}
  register: sqlite_cli
  ignore_errors: yes

- name: Fail if sqlite cli image is not found
  fail:
    msg: "The SQLite CLI image '{{ sqlite_image }}' is not loaded."
  when: sqlite_cli.rc != 0

- name: Create quay database file with persistent WAL mode and correct permissions
  block:
    - name: Create DB file and set permissions with error messages
      command: >
        podman run --rm
        -v {{ expanded_sqlite_storage }}:/sqlite:Z
        --entrypoint /bin/sh
        {{ sqlite_image }}
        -c '
          if ! sqlite3 /sqlite/quay_sqlite.db "PRAGMA journal_mode=WAL;"; then
            echo "Failed to set WAL mode" >&2
            exit 1
          fi
          if ! chmod 0664 /sqlite/quay_sqlite.db; then
            echo "Failed to chmod database file" >&2
            exit 1
          fi
        '
      register: db_file_creation_result
      failed_when: db_file_creation_result.rc != 0
      changed_when: true


- name: Start Quay service
  systemd:
    name: quay-app.service
    enabled: yes
    daemon_reload: yes
    state: restarted
    scope: "{{ systemd_scope }}"
